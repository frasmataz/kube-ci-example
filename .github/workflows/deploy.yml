name: Base build and deploy
on:   [push]
jobs:
  build-and-deploy:
    runs-on:    ubuntu-latest
    container:  gcr.io/google.com/cloudsdktool/cloud-sdk:latest
    env:
      IMAGE:              nginx-packed
      REGISTRY_HOSTNAME:  gcr.io
      GCP_ACCOUNT_ID:     ${{ secrets.GCP_ACCOUNT_ID }}
      GCP_KEY:            ${{ secrets.GCP_KEY }}
      GCP_PROJECT:        ${{ secrets.GCP_PROJECT }}
      GCP_REGION:         europe-west1
      GCP_ZONE:           europe-west1-b
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set build & deployment parameters
        run: |
          echo "GIT_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "DOCKER_TAG=$REGISTRY_HOSTNAME/$GCP_PROJECT/$IMAGE:${GITHUB_REF##*/}-${GITHUB_RUN_ID}" >> $GITHUB_ENV

      - name: Environment config
        run: |
          if echo ${{ env.GIT_TAG }} | grep -P '^[0-9]+.[0-9]+.[0-9]+$'; then
            echo 'This is a production release tag'
            echo 'ENV=prod' >> $GITHUB_ENV
            echo "KUBE_NAMESPACE=default" >> $GITHUB_ENV
          elif echo ${{ env.GIT_TAG }} | grep -P '^[0-9]+.[0-9]+.[0-9]+-rc[0-9]+$'; then
            echo 'This is a staging release candidate tag'
            echo 'ENV=staging' >> $GITHUB_ENV
            echo "KUBE_NAMESPACE=staging" >> $GITHUB_ENV
          elif [ "$GIT_TAG" = 'main' ]; then
            echo 'This is a dev deployment'
            echo 'ENV=dev' >> $GITHUB_ENV
            echo "KUBE_NAMESPACE=dev" >> $GITHUB_ENV
          elif echo ${{ env.GIT_TAG }} | grep -P '[a-z0-9]([-a-z0-9]*[a-z0-9])?'; then
            echo 'This is a feature branch'
            echo 'ENV=namespace' >> $GITHUB_ENV
            echo "KUBE_NAMESPACE=${GITHUB_REF##*/}" >> $GITHUB_ENV
          else
            echo 'This is an unrecognised tag, will not deploy.'
            echo 'ENV=unknown' >> $GITHUB_ENV
          fi

      - name: Install tooling
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -Lo ytt https://github.com/vmware-tanzu/carvel-ytt/releases/download/v0.35.0/ytt-linux-amd64
          chmod +x ./ytt

      - name: Configure gcloud
        run: |
          echo $GCP_KEY | base64 -di > /tmp/gcp_key.json
          gcloud auth activate-service-account $GCP_ACCOUNT_ID --key-file=/tmp/gcp_key.json

          gcloud config set project $GCP_PROJECT
          gcloud config set compute/region $GCP_REGION
          gcloud config set compute/zone $GCP_ZONE

          gcloud container clusters get-credentials primary-cluster
          gcloud auth configure-docker $REGISTRY_HOSTNAME --quiet

      - name: Docker image build
        run: docker build -t $DOCKER_TAG nginx

      - name: Push image to GCR
        run: docker push $DOCKER_TAG

      - name: Create kube namespace
        if: ${{ env.ENV == 'namespace' }}
        run: |
          if ! kubectl get namespace ${{ env.KUBE_NAMESPACE }}; then
            kubectl create namespace ${{ env.KUBE_NAMESPACE }}
          fi

      - name: Kube templating and deploy
        if: ${{ env.ENV != 'unknown' }}
        run: |
          cat > values.yml <<EOF
          #@data/values
          ---
          image: $DOCKER_TAG
          EOF

          ./ytt -f nginx-pod.yml -f values.yml | kubectl -n ${{ env.KUBE_NAMESPACE }} apply -f -

          kubectl -n ${{ env.KUBE_NAMESPACE }} get services
